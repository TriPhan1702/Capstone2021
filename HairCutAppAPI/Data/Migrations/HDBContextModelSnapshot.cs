// <auto-generated />
using System;
using HairCutAppAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HairCutAppAPI.Data.Migrations
{
    [DbContext(typeof(HDBContext))]
    partial class HDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HairCutAppAPI.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin123@gmail.com",
                            PasswordHash = new byte[] { 49, 184, 26, 177, 119, 62, 199, 235, 174, 84, 102, 111, 249, 100, 176, 147, 21, 176, 145, 217, 168, 119, 29, 3, 102, 115, 0, 127, 7, 146, 47, 122, 82, 75, 41, 5, 56, 65, 204, 113, 220, 136, 128, 197, 153, 40, 182, 7, 29, 187, 124, 84, 150, 106, 49, 87, 242, 195, 18, 96, 19, 67, 144, 237 },
                            PasswordSalt = new byte[] { 153, 86, 74, 189, 200, 44, 59, 29, 215, 9, 170, 162, 174, 73, 57, 20, 100, 106, 183, 181, 151, 160, 244, 222, 90, 37, 122, 196, 246, 227, 238, 65, 124, 250, 117, 62, 213, 10, 18, 72, 60, 125, 68, 100, 10, 240, 10, 150, 255, 2, 2, 36, 175, 231, 137, 247, 9, 52, 153, 30, 89, 237, 44, 6, 99, 219, 185, 236, 103, 190, 84, 134, 106, 80, 119, 213, 150, 247, 197, 215, 244, 148, 107, 211, 228, 205, 145, 133, 0, 104, 108, 197, 79, 98, 164, 201, 227, 229, 64, 152, 197, 94, 219, 94, 182, 202, 252, 222, 174, 233, 174, 161, 112, 114, 74, 215, 87, 244, 108, 200, 25, 28, 193, 3, 220, 3, 90, 212 },
                            PhoneNumber = "0869190061",
                            Role = "administrator",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Email = "manager123@gmail.com",
                            PasswordHash = new byte[] { 49, 184, 26, 177, 119, 62, 199, 235, 174, 84, 102, 111, 249, 100, 176, 147, 21, 176, 145, 217, 168, 119, 29, 3, 102, 115, 0, 127, 7, 146, 47, 122, 82, 75, 41, 5, 56, 65, 204, 113, 220, 136, 128, 197, 153, 40, 182, 7, 29, 187, 124, 84, 150, 106, 49, 87, 242, 195, 18, 96, 19, 67, 144, 237 },
                            PasswordSalt = new byte[] { 153, 86, 74, 189, 200, 44, 59, 29, 215, 9, 170, 162, 174, 73, 57, 20, 100, 106, 183, 181, 151, 160, 244, 222, 90, 37, 122, 196, 246, 227, 238, 65, 124, 250, 117, 62, 213, 10, 18, 72, 60, 125, 68, 100, 10, 240, 10, 150, 255, 2, 2, 36, 175, 231, 137, 247, 9, 52, 153, 30, 89, 237, 44, 6, 99, 219, 185, 236, 103, 190, 84, 134, 106, 80, 119, 213, 150, 247, 197, 215, 244, 148, 107, 211, 228, 205, 145, 133, 0, 104, 108, 197, 79, 98, 164, 201, 227, 229, 64, 152, 197, 94, 219, 94, 182, 202, 252, 222, 174, 233, 174, 161, 112, 114, 74, 215, 87, 244, 108, 200, 25, 28, 193, 3, 220, 3, 90, 212 },
                            PhoneNumber = "0869190061",
                            Role = "manager",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Email = "stylist123@gmail.com",
                            PasswordHash = new byte[] { 49, 184, 26, 177, 119, 62, 199, 235, 174, 84, 102, 111, 249, 100, 176, 147, 21, 176, 145, 217, 168, 119, 29, 3, 102, 115, 0, 127, 7, 146, 47, 122, 82, 75, 41, 5, 56, 65, 204, 113, 220, 136, 128, 197, 153, 40, 182, 7, 29, 187, 124, 84, 150, 106, 49, 87, 242, 195, 18, 96, 19, 67, 144, 237 },
                            PasswordSalt = new byte[] { 153, 86, 74, 189, 200, 44, 59, 29, 215, 9, 170, 162, 174, 73, 57, 20, 100, 106, 183, 181, 151, 160, 244, 222, 90, 37, 122, 196, 246, 227, 238, 65, 124, 250, 117, 62, 213, 10, 18, 72, 60, 125, 68, 100, 10, 240, 10, 150, 255, 2, 2, 36, 175, 231, 137, 247, 9, 52, 153, 30, 89, 237, 44, 6, 99, 219, 185, 236, 103, 190, 84, 134, 106, 80, 119, 213, 150, 247, 197, 215, 244, 148, 107, 211, 228, 205, 145, 133, 0, 104, 108, 197, 79, 98, 164, 201, 227, 229, 64, 152, 197, 94, 219, 94, 182, 202, 252, 222, 174, 233, 174, 161, 112, 114, 74, 215, 87, 244, 108, 200, 25, 28, 193, 3, 220, 3, 90, 212 },
                            PhoneNumber = "0869190061",
                            Role = "stylist",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            Email = "beautician123@gmail.com",
                            PasswordHash = new byte[] { 49, 184, 26, 177, 119, 62, 199, 235, 174, 84, 102, 111, 249, 100, 176, 147, 21, 176, 145, 217, 168, 119, 29, 3, 102, 115, 0, 127, 7, 146, 47, 122, 82, 75, 41, 5, 56, 65, 204, 113, 220, 136, 128, 197, 153, 40, 182, 7, 29, 187, 124, 84, 150, 106, 49, 87, 242, 195, 18, 96, 19, 67, 144, 237 },
                            PasswordSalt = new byte[] { 153, 86, 74, 189, 200, 44, 59, 29, 215, 9, 170, 162, 174, 73, 57, 20, 100, 106, 183, 181, 151, 160, 244, 222, 90, 37, 122, 196, 246, 227, 238, 65, 124, 250, 117, 62, 213, 10, 18, 72, 60, 125, 68, 100, 10, 240, 10, 150, 255, 2, 2, 36, 175, 231, 137, 247, 9, 52, 153, 30, 89, 237, 44, 6, 99, 219, 185, 236, 103, 190, 84, 134, 106, 80, 119, 213, 150, 247, 197, 215, 244, 148, 107, 211, 228, 205, 145, 133, 0, 104, 108, 197, 79, 98, 164, 201, 227, 229, 64, 152, 197, 94, 219, 94, 182, 202, 252, 222, 174, 233, 174, 161, 112, 114, 74, 215, 87, 244, 108, 200, 25, 28, 193, 3, 220, 3, 90, 212 },
                            PhoneNumber = "0869190061",
                            Role = "beautician",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            Email = "stylist1234@gmail.com",
                            PasswordHash = new byte[] { 49, 184, 26, 177, 119, 62, 199, 235, 174, 84, 102, 111, 249, 100, 176, 147, 21, 176, 145, 217, 168, 119, 29, 3, 102, 115, 0, 127, 7, 146, 47, 122, 82, 75, 41, 5, 56, 65, 204, 113, 220, 136, 128, 197, 153, 40, 182, 7, 29, 187, 124, 84, 150, 106, 49, 87, 242, 195, 18, 96, 19, 67, 144, 237 },
                            PasswordSalt = new byte[] { 153, 86, 74, 189, 200, 44, 59, 29, 215, 9, 170, 162, 174, 73, 57, 20, 100, 106, 183, 181, 151, 160, 244, 222, 90, 37, 122, 196, 246, 227, 238, 65, 124, 250, 117, 62, 213, 10, 18, 72, 60, 125, 68, 100, 10, 240, 10, 150, 255, 2, 2, 36, 175, 231, 137, 247, 9, 52, 153, 30, 89, 237, 44, 6, 99, 219, 185, 236, 103, 190, 84, 134, 106, 80, 119, 213, 150, 247, 197, 215, 244, 148, 107, 211, 228, 205, 145, 133, 0, 104, 108, 197, 79, 98, 164, 201, 227, 229, 64, 152, 197, 94, 219, 94, 182, 202, 252, 222, 174, 233, 174, 161, 112, 114, 74, 215, 87, 244, 108, 200, 25, 28, 193, 3, 220, 3, 90, 212 },
                            PhoneNumber = "0869190061",
                            Role = "stylist",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 6,
                            Email = "beautician1234@gmail.com",
                            PasswordHash = new byte[] { 49, 184, 26, 177, 119, 62, 199, 235, 174, 84, 102, 111, 249, 100, 176, 147, 21, 176, 145, 217, 168, 119, 29, 3, 102, 115, 0, 127, 7, 146, 47, 122, 82, 75, 41, 5, 56, 65, 204, 113, 220, 136, 128, 197, 153, 40, 182, 7, 29, 187, 124, 84, 150, 106, 49, 87, 242, 195, 18, 96, 19, 67, 144, 237 },
                            PasswordSalt = new byte[] { 153, 86, 74, 189, 200, 44, 59, 29, 215, 9, 170, 162, 174, 73, 57, 20, 100, 106, 183, 181, 151, 160, 244, 222, 90, 37, 122, 196, 246, 227, 238, 65, 124, 250, 117, 62, 213, 10, 18, 72, 60, 125, 68, 100, 10, 240, 10, 150, 255, 2, 2, 36, 175, 231, 137, 247, 9, 52, 153, 30, 89, 237, 44, 6, 99, 219, 185, 236, 103, 190, 84, 134, 106, 80, 119, 213, 150, 247, 197, 215, 244, 148, 107, 211, 228, 205, 145, 133, 0, 104, 108, 197, 79, 98, 164, 201, 227, 229, 64, 152, 197, 94, 219, 94, 182, 202, 252, 222, 174, 233, 174, 161, 112, 114, 74, 215, 87, 244, 108, 200, 25, 28, 193, 3, 220, 3, 90, 212 },
                            PhoneNumber = "0869190061",
                            Role = "beautician",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 7,
                            Email = "customer1@gmail.com",
                            PasswordHash = new byte[] { 49, 184, 26, 177, 119, 62, 199, 235, 174, 84, 102, 111, 249, 100, 176, 147, 21, 176, 145, 217, 168, 119, 29, 3, 102, 115, 0, 127, 7, 146, 47, 122, 82, 75, 41, 5, 56, 65, 204, 113, 220, 136, 128, 197, 153, 40, 182, 7, 29, 187, 124, 84, 150, 106, 49, 87, 242, 195, 18, 96, 19, 67, 144, 237 },
                            PasswordSalt = new byte[] { 153, 86, 74, 189, 200, 44, 59, 29, 215, 9, 170, 162, 174, 73, 57, 20, 100, 106, 183, 181, 151, 160, 244, 222, 90, 37, 122, 196, 246, 227, 238, 65, 124, 250, 117, 62, 213, 10, 18, 72, 60, 125, 68, 100, 10, 240, 10, 150, 255, 2, 2, 36, 175, 231, 137, 247, 9, 52, 153, 30, 89, 237, 44, 6, 99, 219, 185, 236, 103, 190, 84, 134, 106, 80, 119, 213, 150, 247, 197, 215, 244, 148, 107, 211, 228, 205, 145, 133, 0, 104, 108, 197, 79, 98, 164, 201, 227, 229, 64, 152, 197, 94, 219, 94, 182, 202, 252, 222, 174, 233, 174, 161, 112, 114, 74, 215, 87, 244, 108, 200, 25, 28, 193, 3, 220, 3, 90, 212 },
                            PhoneNumber = "0869190061",
                            Role = "customer",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 8,
                            Email = "customer2@gmail.com",
                            PasswordHash = new byte[] { 49, 184, 26, 177, 119, 62, 199, 235, 174, 84, 102, 111, 249, 100, 176, 147, 21, 176, 145, 217, 168, 119, 29, 3, 102, 115, 0, 127, 7, 146, 47, 122, 82, 75, 41, 5, 56, 65, 204, 113, 220, 136, 128, 197, 153, 40, 182, 7, 29, 187, 124, 84, 150, 106, 49, 87, 242, 195, 18, 96, 19, 67, 144, 237 },
                            PasswordSalt = new byte[] { 153, 86, 74, 189, 200, 44, 59, 29, 215, 9, 170, 162, 174, 73, 57, 20, 100, 106, 183, 181, 151, 160, 244, 222, 90, 37, 122, 196, 246, 227, 238, 65, 124, 250, 117, 62, 213, 10, 18, 72, 60, 125, 68, 100, 10, 240, 10, 150, 255, 2, 2, 36, 175, 231, 137, 247, 9, 52, 153, 30, 89, 237, 44, 6, 99, 219, 185, 236, 103, 190, 84, 134, 106, 80, 119, 213, 150, 247, 197, 215, 244, 148, 107, 211, 228, 205, 145, 133, 0, 104, 108, 197, 79, 98, 164, 201, 227, 229, 64, 152, 197, 94, 219, 94, 182, 202, 252, 222, 174, 233, 174, 161, 112, 114, 74, 215, 87, 244, 108, 200, 25, 28, 193, 3, 220, 3, 90, 212 },
                            PhoneNumber = "0869190061",
                            Role = "customer",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 9,
                            Email = "customer3@gmail.com",
                            PasswordHash = new byte[] { 49, 184, 26, 177, 119, 62, 199, 235, 174, 84, 102, 111, 249, 100, 176, 147, 21, 176, 145, 217, 168, 119, 29, 3, 102, 115, 0, 127, 7, 146, 47, 122, 82, 75, 41, 5, 56, 65, 204, 113, 220, 136, 128, 197, 153, 40, 182, 7, 29, 187, 124, 84, 150, 106, 49, 87, 242, 195, 18, 96, 19, 67, 144, 237 },
                            PasswordSalt = new byte[] { 153, 86, 74, 189, 200, 44, 59, 29, 215, 9, 170, 162, 174, 73, 57, 20, 100, 106, 183, 181, 151, 160, 244, 222, 90, 37, 122, 196, 246, 227, 238, 65, 124, 250, 117, 62, 213, 10, 18, 72, 60, 125, 68, 100, 10, 240, 10, 150, 255, 2, 2, 36, 175, 231, 137, 247, 9, 52, 153, 30, 89, 237, 44, 6, 99, 219, 185, 236, 103, 190, 84, 134, 106, 80, 119, 213, 150, 247, 197, 215, 244, 148, 107, 211, 228, 205, 145, 133, 0, 104, 108, 197, 79, 98, 164, 201, 227, 229, 64, 152, 197, 94, 219, 94, 182, 202, 252, 222, 174, 233, 174, 161, 112, 114, 74, 215, 87, 244, 108, 200, 25, 28, 193, 3, 220, 3, 90, 212 },
                            PhoneNumber = "0869190061",
                            Role = "customer",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChosenStaffId")
                        .HasColumnType("int");

                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PromotionalCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ChosenStaffId");

                    b.HasIndex("ComboId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalonId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.AppointmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.AppointmentRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RatingComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("AppointmentRatings");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Combo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Combos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Cắt Tóc",
                            Duration = 1,
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Cắt Tóc",
                            Status = "active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Cắt Tóc Gội Đầu",
                            Duration = 2,
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Cắt Tóc Gội Đầu",
                            Status = "active"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Cắt Tóc Gội Đầu Rửa Mặt",
                            Duration = 2,
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Cắt Tóc Gội Đầu Rửa Mặt",
                            Status = "active"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Cắt Tóc, Ráy Táy, Gội Đầu, Rửa Mặt, Dắp mặt",
                            Duration = 3,
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Chăm sóc đầy đử",
                            Status = "active"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Cắt Tóc, Ráy Táy",
                            Duration = 1,
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Cắt tóc ráy tai",
                            Status = "active"
                        });
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.ComboDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ComboDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComboId = 1,
                            Order = 0,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            ComboId = 2,
                            Order = 0,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            ComboId = 2,
                            Order = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 4,
                            ComboId = 3,
                            Order = 0,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 5,
                            ComboId = 3,
                            Order = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 6,
                            ComboId = 3,
                            Order = 2,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 7,
                            ComboId = 4,
                            Order = 0,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 8,
                            ComboId = 4,
                            Order = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 9,
                            ComboId = 4,
                            Order = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 10,
                            ComboId = 4,
                            Order = 3,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 11,
                            ComboId = 4,
                            Order = 4,
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 12,
                            ComboId = 5,
                            Order = 0,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 13,
                            ComboId = 5,
                            Order = 1,
                            ServiceId = 3
                        });
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            FullName = "Customer 1",
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            FullName = "Customer 2",
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            FullName = "Customer 3",
                            UserId = 9
                        });
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.CustomersCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomersCodes");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.PromotionalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUniversal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UsesPerCustomer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PromotionalCodes");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Rating")
                        .HasColumnType("bit");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SalonId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Salons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Salon 1",
                            LastUpdate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Salon 1",
                            Status = "active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Salon 2",
                            LastUpdate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Salon 2",
                            Status = "active"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Salon 3",
                            LastUpdate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Salon 3",
                            Status = "active"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Salon 4",
                            LastUpdate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Salon 4",
                            Status = "active"
                        });
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.SalonsCodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodeId")
                        .HasColumnType("int");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("SalonId");

                    b.ToTable("SalonsCodes");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Cắt tóc",
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Cắt tóc",
                            Price = 50000m,
                            Status = "active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Gội Đầu",
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Gội Đầu",
                            Price = 20000m,
                            Status = "active"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Ráy tai",
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Ráy tai",
                            Price = 10000m,
                            Status = "active"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Gội Đầu",
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Rửa Mặt",
                            Price = 20000m,
                            Status = "active"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Description = "Đắp Mặt",
                            LastUpdated = new DateTime(2021, 10, 27, 19, 22, 18, 145, DateTimeKind.Local).AddTicks(7691),
                            Name = "Đắp Mặt",
                            Price = 20000m,
                            Status = "active"
                        });
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.SlotOfDay", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("SlotsOfDay");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new TimeSpan(0, 7, 30, 0, 0),
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new TimeSpan(0, 8, 0, 0, 0),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndTime = new TimeSpan(0, 8, 30, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            EndTime = new TimeSpan(0, 9, 0, 0, 0),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            EndTime = new TimeSpan(0, 9, 30, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            EndTime = new TimeSpan(0, 10, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 30, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            EndTime = new TimeSpan(0, 10, 30, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            EndTime = new TimeSpan(0, 11, 0, 0, 0),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 11, 30, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            EndTime = new TimeSpan(0, 12, 30, 0, 0),
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0),
                            StartTime = new TimeSpan(0, 12, 30, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            EndTime = new TimeSpan(0, 13, 30, 0, 0),
                            StartTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            StartTime = new TimeSpan(0, 13, 30, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            EndTime = new TimeSpan(0, 14, 30, 0, 0),
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            StartTime = new TimeSpan(0, 14, 30, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            EndTime = new TimeSpan(0, 15, 30, 0, 0),
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            StartTime = new TimeSpan(0, 15, 30, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            EndTime = new TimeSpan(0, 16, 30, 0, 0),
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            StartTime = new TimeSpan(0, 16, 30, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            StartTime = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            StartTime = new TimeSpan(0, 17, 30, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0),
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            StartTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            EndTime = new TimeSpan(0, 19, 30, 0, 0),
                            StartTime = new TimeSpan(0, 19, 0, 0, 0)
                        },
                        new
                        {
                            Id = 26,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            StartTime = new TimeSpan(0, 19, 30, 0, 0)
                        },
                        new
                        {
                            Id = 27,
                            EndTime = new TimeSpan(0, 20, 30, 0, 0),
                            StartTime = new TimeSpan(0, 20, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("StaffType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("UserId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Description = "Manager 1",
                            FullName = "Manager 1",
                            SalonId = 1,
                            StaffType = "manager",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Stylist 1",
                            FullName = "Stylist 1",
                            SalonId = 1,
                            StaffType = "stylist",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Beautician 1",
                            FullName = "Beautician 1",
                            SalonId = 1,
                            StaffType = "beautician",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Stylist 2",
                            FullName = "Stylist 2",
                            SalonId = 1,
                            StaffType = "stylist",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Beautician 2",
                            FullName = "Beautician 2",
                            SalonId = 1,
                            StaffType = "beautician",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.WorkSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SlotOfDayId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("SlotOfDayId");

                    b.HasIndex("StaffId");

                    b.ToTable("WorkSlots");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Appointment", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.Staff", "ChosenStaff")
                        .WithMany("Appointments")
                        .HasForeignKey("ChosenStaffId");

                    b.HasOne("HairCutAppAPI.Entities.Combo", "Combo")
                        .WithMany("Appointments")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairCutAppAPI.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairCutAppAPI.Entities.Salon", "Salon")
                        .WithMany("Appointments")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChosenStaff");

                    b.Navigation("Combo");

                    b.Navigation("Customer");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.AppointmentDetail", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairCutAppAPI.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairCutAppAPI.Entities.Staff", "Staff")
                        .WithMany("AppointmentDetails")
                        .HasForeignKey("StaffId");

                    b.Navigation("Appointment");

                    b.Navigation("Service");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.AppointmentRating", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.Appointment", "Appointment")
                        .WithOne("Rating")
                        .HasForeignKey("HairCutAppAPI.Entities.AppointmentRating", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.ComboDetail", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.Combo", "Combo")
                        .WithMany("ComboDetails")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairCutAppAPI.Entities.Service", "Service")
                        .WithMany("ComboDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Customer", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.AppUser", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.CustomersCodes", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.PromotionalCode", "Code")
                        .WithMany("CustomersCodes")
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairCutAppAPI.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Code");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Device", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.AppUser", "User")
                        .WithOne("Device")
                        .HasForeignKey("HairCutAppAPI.Entities.Device", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Review", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairCutAppAPI.Entities.Salon", "Salon")
                        .WithMany("Reviews")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.SalonsCodes", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.PromotionalCode", "Code")
                        .WithMany("SalonsCodes")
                        .HasForeignKey("CodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairCutAppAPI.Entities.Salon", "Salon")
                        .WithMany("SalonsCodes")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Code");

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Staff", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.Salon", "Salon")
                        .WithMany("Staffs")
                        .HasForeignKey("SalonId");

                    b.HasOne("HairCutAppAPI.Entities.AppUser", "User")
                        .WithMany("Staffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.WorkSlot", b =>
                {
                    b.HasOne("HairCutAppAPI.Entities.SlotOfDay", "SlotOfDay")
                        .WithMany("WorkSlots")
                        .HasForeignKey("SlotOfDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HairCutAppAPI.Entities.Staff", "Staff")
                        .WithMany("WorkSlots")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlotOfDay");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.AppUser", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Device");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Combo", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ComboDetails");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.PromotionalCode", b =>
                {
                    b.Navigation("CustomersCodes");

                    b.Navigation("SalonsCodes");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Salon", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Reviews");

                    b.Navigation("SalonsCodes");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Service", b =>
                {
                    b.Navigation("ComboDetails");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.SlotOfDay", b =>
                {
                    b.Navigation("WorkSlots");
                });

            modelBuilder.Entity("HairCutAppAPI.Entities.Staff", b =>
                {
                    b.Navigation("AppointmentDetails");

                    b.Navigation("Appointments");

                    b.Navigation("WorkSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
